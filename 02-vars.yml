##Variable precedence: 
    #cmd level >> Task Level >>Variable from File>>Play Level Varaible >>Inventory variable.


- name: Play Varaibles
  hosts: localhost
  vars:
    URL: play.example.com
  tasks:
    - name: Print Play Variable
      ansible.builtin.debug:
        msg: URL ={{URL}}



- name: Play Varaibles from file
  hosts: localhost
  ## vars_files works only on play levels
  vars_files:
    - var.yml
  tasks:
    - name: Print Play Variables from file
      ansible.builtin.debug:
        msg: URL ={{URL}}

- name: Task Level Variable
  hosts: localhost
  tasks:
    - name: Print Task level variable from this task
      #These vars are only for this task, next task on the same play can't access this variable.
      vars:
        URL: task.example.com
      ansible.builtin.debug:
        msg: URL ={{URL}}

- name: Variables from Inventory file
  # inventory file host can be a group or 'all' for everything
  hosts: all
  tasks: # variable values must be filled in inventory file (/tmp/inv) and pass FILENAME in ansible command.
    - name: Print play variables from inventory file
      ansible.builtin.debug:
        msg: "{{URL}}"


#2 - ANSIBLE predefined variables called ---FACTs
- name: Variables from predefined in ansible
  # inventory file host can be a group or 'all' for everything
  hosts: all
  tasks: # variable values must be filled in inventory file (/tmp/inv) and pass FILENAME in ansible command.
    - name: Print predefined variables
      ansible.builtin.debug:
        msg: "URL = {{URL}}, Hostname of server = {{ansible_hostname}}"



# 1 - ANSBILE RUN TIME VARIABLE====== which means previous task result can be used next task variable.

  # = From a Task output (register)
  # = Set a variable using task( set_fact)
  # - Register - is to store and print output where as SET_FACT to store variable in use further down. 

- name: Register a variable
  hosts: localhost
  tasks: # set output to OUT variable
    - name: get uptime output
      ansible.builtin.shell: uptime
      register: out

    - name: print out value
      ansible.builtin.debug:
      #now printing out variable
        msg: "{{out}}"
    
    - name: Declara a variable to store json out
      ansible.builtin.set_fact:
      # uptime returns json which has rc attribute in it. hence out.rc brings out value
        status: "{{ out.rc }}"

    - name: print uptime out rc value
      ansible.builtin.debug:
      # above status stored out.rc value using set_fact command then using status to return stored value
        msg: "{{ status }}"
